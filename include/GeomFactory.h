#ifndef GEOMFACTORY_H
#define GEOMFACTORY_H

#include "Util.h"
#include "GL_Includes.h"

#include <vec3.hpp>
#include <vec4.hpp>
#include <mat4x4.hpp>

// GeomFactory is a factory class that gets exposed to 
// python. The script modifies the factory and then
// passes it to a GeomCollection. Given the current
// state of the factory, geometry is created on the GPU
// and information about it is sent to the collection
// Note that the factories will cache off VAOs for reuse


// Geometry factory class
class GeomFactory {
public:
	GeomFactory();
	// This info generated by the factory
	// and used during draw calls
	struct Info {
		GLuint VAO;
		GLuint nIdx;
		vec4 color;
		mat4 MV;
	};

	// Static handle to position attribute
	static GLint s_PosHandle;
	static void setPosHandle(GLint posHandle) {
		s_PosHandle = posHandle;
	}

protected:
	// I guess it's assumed every geom needs this stuff
	vec3 m_Trans, m_Scale;
	vec4 m_Rot, m_Color;

	// Used for caching, may have to move to subclasses
	std::map<std::string, GLuint> m_CachedVAOs;

	// getGeom is protected
	friend class GeomCollection;

	// The collection calls this function
	// It's up to subclasses to determine how geometry is created
	virtual Info getGeom() = 0;
public:

	void setTrans(float, float, float);
	void setScale(float, float, float);
	void setRot(float, float, float, float);
	void setColor(float, float, float, float);
};

// A factory for making quads
class QuadFactory : public GeomFactory {
public:
	QuadFactory();
	GeomFactory::Info getGeom() override;
};

#endif
